#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

def run(config):
    import sys
    
    import DST
    import SOM

    rSOM = SOM.SOM()
    rSO = SOM.SO()

    counter = 0
    for ifile in config.data:

        try:
            data_dst = DST.getInstance("application/x-NeXus", ifile)
        except SystemError:
            print "ERROR: Failed to data read file %s" % ifile
            sys.exit(-1)

        so_axis = "time_of_flight"
            
        if config.verbose:
            print "Reading data file"
            
        d_som1 = data_dst.getSOM(config.data_paths, so_axis)

        d_som2 = dr_lib.sum_all_spectra(d_som1)
        d_som2[0].id = d_som1[0].id

        d_som1 = None
        del d_som1

        if counter == 0:
            rSOM.copyAttributes(d_som2)
        
        value = dr_lib.integrate_axis(d_som2)

        if config.info is not None:
            xval = config.info[counter]
        else:
            xval = counter

        rSO.axis[0].val.append(xval)
        rSO.y.append(value[0])
        rSO.var_y.append(value[1])

        counter += 1

        data_dst.release_resource()

    # Add information to SOM
    rSOM.attr_list["filename"] = config.data
    rSOM.setTitle("Rocking Curve")
    rSOM.setDataSetType("density")
    rSOM.setYLabel("Detector Sum")
    rSOM.setYUnits("counts")
    rSOM.setAxisLabel(0, "Motor Position")
    rSOM.setAxisUnits(0, "a.u.")
    rSOM.append(rSO)

    hlr_utils.write_file(config.output, "text/Spec", rSOM, replace=False,
                         verbose=config.verbose,
                         message="rocking curve information")


if __name__ == "__main__":
    import os
    
    import dr_lib
    import hlr_utils
    
    # set up the options available
    parser = hlr_utils.BasicOptions("usage: %prog [options] <datafile>")
    
    # Add REF specific options
    parser.add_option("", "--data-paths", dest="data_paths",
                      help="Specify the comma separated list of detector data"\
                      +"paths and signals. Default is /entry/bank1,1")
    parser.set_defaults(data_paths="/entry/bank1,1")

    parser.add_option("-i", "--info", dest="info", action="append",
                      type="float",
                      help="Specify an entry for the x-axis of the rocking "\
                      +"curve. Each entry must be given with an individual "\
                      +"flag usage: -i1 -i2 -i3 etc.")
    
    (options, args) = parser.parse_args()

    # set up the configuration
    configure = hlr_utils.Configure()

    # get the datafile names and check them
    if args:
        for infile in args:
            if not hlr_utils.file_exists(infile):
                print "Data file [%s] does not exist, removing from list" % \
                      infile
                args.remove(infile)
            else:
                pass

        configure.data = args
    else:
        parser.error("Did not specify a datafile")
        
    # create the output file name if there isn't one supplied
    if options.output is not None:
        configure.output = options.output
    else:
        configure.output = os.path.join(os.getcwd(), "rocking_curve.txt")
        print "Using %s as output file" % configure.output

    # set the verbosity
    configure.verbose = options.verbose

    # set the data paths
    configure.data_paths = hlr_utils.create_data_paths(options.data_paths)

    # set the x-axis information list
    configure.info = options.info

    # If x-axis information given, the number of entries and the number of
    # given data files MUST match
    if configure.info is not None:
        if len(args) != len(configure.info):
            raise RuntimeError("The number of files and x-axis entries "\
                               +"must be the same")
        else:
            pass
    else:
        pass

    # run the program
    run(configure)
        
