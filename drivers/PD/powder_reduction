#!/usr/bin/env python                                                          
#                  High-Level Reduction Functions                              
#           A part of the SNS Analysis Software Suite.                         
#                                                                              
#                  Spallation Neutron Source                                   
#          Oak Ridge National Laboratory, Oak Ridge TN.                        
#                                                                              
#                                                                              
#                             NOTICE                                           
#                                                                              
# For this software and its associated documentation, permission is granted    
# to reproduce, prepare derivative works, and distribute copies to the public  
# for any purpose and without fee.                                             
#                                                                              
# This material was prepared as an account of work sponsored by an agency of   
# the United States Government.  Neither the United States Government nor the  
# United States Department of Energy, nor any of their employees, makes any    
# warranty, express or implied, or assumes any legal liability or              
# responsibility for the accuracy, completeness, or usefulness of any          
# information, apparatus, product, or process disclosed, or represents that    
# its use would not infringe privately owned rights.                           
#                                                                              
# $Id$

def create_tof_2D(conf, data_som):

    return dr_lib.create_X_vs_pixpos(data_som, data_som[0].axis[0].val,
                                     so_id="Full Detector",
                                     y_label="counts",
                                     y_units="counts / A",
                                     x_label="Time-of-flight",
                                     x_units="microseconds",
                                     rebin="False")

def subtract_bkg_from_data(config, data_som, bkg_som):

    if bkg_som is None:
        return data_som

    return common_lib.sub_ncerr(data_som, bkg_som)

def norm_data_by_van(data_som, norm_som):

    if norm_som is None:
        return data_som

    return common_lib.div_ncerr(data_som, norm_som)

def convert_data_to_wavelength(conf, data_som):

    return common_lib.tof_to_wavelength(data_som, inst_param="total",
                                        units="microsecond")
def convert_data_to_d_spacing(data_som):

    return common_lib.wavelength_to_d_spacing(data_som)

def create_final1(conf, data_som):

    return dr_lib.create_X_vs_pixpos(data_som, conf.l_bins,
                                     so_id="Full Detector",
                                     y_label="counts",
                                     y_units="counts / A",
                                     x_label="wavelength",
                                     x_units="Angstroms")

def create_final2(conf, data_som):

    return dr_lib.create_X_vs_pixpos(data_som, conf.d_bins,
                                     so_id="Full Detector",
                                     y_label="counts",
                                     y_units="counts / A",
                                     x_label="d-spacing",
                                     x_units="Angstroms")

def convert_data_to_scalar_Q(conf, data_som):

    return common_lib.wavelength_to_scalar_Q(data_som, half_angle=True)

def combine_spectra(bins, data_som):

    data_som1 = common_lib.rebin_axis_1D(data_som, bins)
    
    return dr_lib.sum_all_spectra(data_som1)

def run(config):

    if config.data is None:
        raise RuntimeError("Need to pass a data filename to the driver "\
                           +"script.")

    try:
        data_dst = DST.getInstance("application/x-NeXus", config.data)
    except SystemError:
        print "ERROR: Failed to data read file %s" % config.data
        sys.exit(-1)

    so_axis = "time_of_flight"

    if config.verbose:
        print "Reading data file"

    d_som1 = data_dst.getSOM(config.data_paths, so_axis)

    data_dst.release_resource()
    
    d_som1_A = create_tof_2D(config, d_som1)

    hlr_utils.write_file(config.data, "text/Dave2d", d_som1_A,
                         output_ext="tof",
                         verbose=config.verbose,
                         message="TOF information")

    del d_som1_A
    
    if config.norm is not None:
        if config.verbose:
            print "Reading normalization file"
            
        norm_dst = DST.getInstance("application/x-NeXus", config.norm)
        n_som1 = norm_dst.getSOM(config.data_paths, so_axis,
                                 mask_file=config.mask_file)
        norm_dst.release_resource()
    else:
        n_som1 = None

    if config.data_bkg is not None:
        if config.verbose:
            print "Reading in background data file"
            
        bkg_dst = DST.getInstance("application/x-NeXus", config.data_bkg)
        bkg_som1 = bkg_dst.getSOM(config.data_paths, so_axis)

        bkg_dst.release_resource()
    else:
        bkg_som1 = None

    if config.verbose and bkg_som1 is not None:
        print "Subtracting background from data"
        
    d_som2 = subtract_bkg_from_data(config, d_som1, bkg_som1)

    del d_som1, bkg_som1

    if config.verbose and n_som1 is not None:
        print "Normalizing data by normalization data"

    d_som3 = norm_data_by_van(d_som2, n_som1)

    del d_som2, n_som1

    if config.det_geom is not None:
        if config.verbose:
            print "Reading in detector geometry file"
            
        det_geom_dst = DST.getInstance("application/x-NxsGeom",
                                       config.det_geom)
        det_geom_dst.setGeometry(config.data_paths, d_som3)
        det_geom_dst.release_resource()

    if config.verbose:
        print "Converting TOF to wavelength"
        
    d_som4 = convert_data_to_wavelength(config, d_som3)

    del d_som3

    if config.dump_wave:
        hlr_utils.write_file(config.data, "text/Spec", d_som4,
                             output_ext="pxl",
                             verbose=config.verbose,
                             message="pixel wavelength information")


    if config.verbose:
        print "Creating 2D spectrum"

    d_som5 = create_final1(config, d_som4)

    # Writing 2D DAVE file

    hlr_utils.write_file(config.output, "text/Dave2d", d_som5,
                         verbose=config.verbose,
                         message="data",
                         replace=False)

    del d_som5

    if config.verbose:
        print "Converting wavelength to scalar Q"

    d_som6 = convert_data_to_scalar_Q(config, d_som4)

    if config.dump_mom:
        hlr_utils.write_file(config.data, "text/Spec", d_som6,
                             output_ext="qxl",
                             verbose=config.verbose,
                             message="pixel Q information")

    d_som7 = combine_spectra(config.Q_bins, d_som6)
    del d_som6

    hlr_utils.write_file(config.data, "text/Spec", d_som7,
                         output_ext="qt",
                         verbose=config.verbose,
                         message="Q information")
        
    del d_som7

    if config.verbose:
        print "Converting wavelength to d_spacing"

    d_som8 = convert_data_to_d_spacing(d_som4)

    d_som9 = combine_spectra(config.d_bins, d_som8)

    hlr_utils.write_file(config.data, "text/Spec", d_som9,
                         output_ext="ds1",
                         verbose=config.verbose,
                         message="d_spacing information")
    del d_som9

    d_som10 = create_final2(config, d_som8)

    hlr_utils.write_file(config.data, "text/Dave2d", d_som10,
                         output_ext="pbd",
                         verbose=config.verbose,
                         message="data",
                         replace=True)
    
    
if __name__ == "__main__":
    import os

    import common_lib
    import dr_lib
    import DST
    import hlr_utils

    # set up the options available
    parser = hlr_utils.SNSOptions("usage: %prog [options] <datafile>")

    parser.add_option("", "--det-geom", dest="det_geom",
                      help="Specify the detector geometry file")

    parser.add_option("", "--lambda-bins", dest="l_bins",
                      help="Specify the minimum and maximum wavelength "\
                      +"values and the wavelength bin width in Angstroms")
    parser.set_defaults(l_bins="0,10,0.005")
    
    parser.add_option("", "--mom-trans-bins", dest="Q_bins",
                      help="Specify the minimum and maximum momentum transfer"\
                      +" values and the momentum transfer bin width in"\
                      +" Angstroms^-1")
    parser.set_defaults(Q_bins="0,10,0.005")
    
    parser.add_option("", "--d-bins", dest="d_bins",
                      help="Specify the minimum and maximum d-spacing values"\
                      +" and the d-spacing bin width in Angstroms")
    parser.set_defaults(d_bins="0,10,0.005")

    parser.add_option("", "--data-paths", dest="data_paths",
                      help="Specify the comma separated list of detector data"\
                      +"paths and signals. Defaults is "\
                      +"/entry/bank1,1/entry/bank2,1")
    parser.set_defaults(data_paths="/entry/bank1,1,/entry/bank2,1")

    parser.add_option("", "--dump-wave", action="store_true", dest="dump_wave",
                      help="Flag to dump the wavelength information for all"\
                      +" pixels")
    
    parser.add_option("", "--dump-mom", action="store_true", dest="dump_mom",
                      help="Flag to dump the Q information for all"\
                      +" pixels")

    parser.set_defaults(dump_wave=False)

    (options, args) = parser.parse_args()

    # set up the configuration
    configure = hlr_utils.Configure()
    
    # get the datafile name and check it
    if len(args) == 1:
        configure.data = args[0]
        if not hlr_utils.file_exists(configure.data):
            parser.error("Data file [%s] does not exist" % configure.data)
    else:
        if options.data is not None:
            configure.data = hlr_utils.fix_filename(options.data)
            if not hlr_utils.file_exists(configure.data):
                parser.error("Data file [%s] does not exist" % configure.data)
        else:
            parser.error("Did not specify a datafile")
    # create the output file name if there isn't one supplied
    if options.output:
        configure.output = hlr_utils.fix_filename(options.output)
    else:
        outfile = os.path.basename(configure.data)
        path = os.path.join(os.getcwd(), outfile)
        configure.output = hlr_utils.ext_replace(path, "nxs", "txt")
        print "Using %s as output file" % configure.output
        
        # set the verbosity
        configure.verbose = options.verbose
        
    configure.norm = hlr_utils.fix_filename(options.norm)
    if configure.norm is not None:
        if not hlr_utils.file_exists(configure.norm):
            parser.error("Normalization file [%s] does not exist" \
                         % configure.norm)

    configure.data_bkg = hlr_utils.fix_filename(options.data_bkg)
    if configure.data_bkg is not None:
        if not hlr_utils.file_exists(configure.data_bkg):
            parser.error("Background file [%s] does not exist" \
                         % configure.data_bkg)

    configure.det_geom = hlr_utils.fix_filename(options.det_geom)
    if configure.det_geom is not None:
        if not hlr_utils.file_exists(configure.det_geom):
            parser.error("Detector geometry file [%s] does not exist" \
                         % configure.det_geom)
    
    # set the data paths
    configure.data_paths = hlr_utils.create_data_paths(options.data_paths)

    # set the lambda bins
    if options.l_bins is not None:
        lfacts = options.l_bins.split(',')
        if len(lfacts) == 3:
            configure.l_bins = hlr_utils.make_axis(float(lfacts[0]),
                                                   float(lfacts[1]),
                                                   float(lfacts[2]))
        else:
            configure.l_bins = hlr_utils.make_axis_file(options.l_bins)
    else:
        configure.l_bins = options.l_bins

    # set the Q bins
    if options.Q_bins is not None:
        qfacts = options.Q_bins.split(',')
        configure.Q_bins = hlr_utils.make_axis(float(qfacts[0]),
                                               float(qfacts[1]),
                                               float(qfacts[2]))
    else:
        configure.Q_bins = options.Q_bins

    # set the d bins
    if options.d_bins is not None:
        dfacts = options.d_bins.split(',')
        configure.d_bins = hlr_utils.make_axis(float(dfacts[0]),
                                               float(dfacts[1]),
                                               float(dfacts[2]))
    else:
        configure.d_bins = options.d_bins        

    # set the ability to dump the wavelength information
    configure.dump_wave = options.dump_wave

    # set the ability to dump the Q information
    configure.dump_mom = options.dump_mom

    # run the program
    run(configure)
