#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

"""
This program covers the functionality outlined in 2.4.3 Area detector
measurement of specular reflectivity in <CHANGE:DR_Lib_RS.doc>.
"""

def convert_mon_tof_to_wavelength(config, mon_som):
    """Step 1. Convert IM1(TOF) to wavelength using function 3.15."""

    if mon_som is None:
        return None
    else:
        return common_lib.tof_to_wavelength(mon_som)
    

def rebin_mon_eff(config, mon_som, mon_eff):
    """Step 2. Rebin eM1(lamda) to IM1(lambdas)'s wavelength axis
    using 3.12. The input is the efficiency eM1(lambda) with the
    output being erM1(lambda)."""

    if mon_eff is None:
        return mon_som
    else:
        return dr_lib.rebin_efficiency(mon_som, mon_eff)


def eff_correct_mon(config, mon_som, mon_eff):
    """Step 3. Correct IM1(lambda) for detector efficiency by using
    the function in 3.9 using IM1(lambda) as data1 and erM1(lambda) as
    data2. The result is IeM1(lambda)."""

    if mon_eff is None:
        return mon_som
    else:
        return common_lib.div_ncerr(mon_som, mon_eff)


def subtract_bkg_from_data(config, data_som, bkg_som):
    """Step 4. Subtract the background using function 3.7 with
    IeDXY(lambda) as data1 and IeBXY(lambda) as data2. The result is
    IebDXY(lambda)."""

    return data_som


def calc_inc_spec_factor(config, mrat_som, mon_som):
    """Step 5. Determine the incident spectrum factor by using
    function 3.9 with M(lambda) as data1 and IeM1(lambda) as
    data2. The result is the incident spectrum factor,
    1/IeM2(lambda). This is essentially one over the incident
    spectrum. This step is necessary due to the removal of monitor 2
    when performing sample measurements."""

    if mrat_som is None:
        return mon_som
    else:
        return common_lib.div_ncerr(mrat_som, mon_som)


def scale_inc_spec_factor(config, isf_som):
    """Step 6. Scale the incident spectrum by the geometry factor
    using function 3.1 with 1/IeM2(lambda) as data1 and G as a. The
    result is the effective incident spectrum factor,
    Iinc(lambda). Note: Iinc(lambda) in not a raw spectrum as noted by
    section 0."""

    if isf_som is None:
        return None
    elif config.geom_factor is None:
        return isf_som
    else:
        return common_lib.div_ncerr(isf_som, config.geom_factor)


def rebin_inc_spec_factor(config):
    """Step 7. Rebin Iinc(lambda) using with the same binning as
    IebDXY(lambda) by using function 3.12."""
    pass


def norm_data_by_inc_spec_factor(config, data_som, isf_som):
    """Step 8. Normalize using the incident spectrum factor using
    function 3.9 with IebDXY(lambda) as data1 and Iinc(lambda) as
    data2. The result is the reflectivity, R(lambda)."""
    
    if isf_som is None:
        return data_som
    else:
        return common_lib.div_ncerr(data_som, isf_som)


def sum_rois(config, data_som):
    """Step 9. Sum the ROIs weighted by the uncertainties according to
    function 3.10."""

    return data_som


def convert_data_wavelength_to_scalar_Q(config, data_som):
    """This step is not in the requirements document and is only available by
    command-line switch."""

    return common_lib.wavlength_to_scalar_Q(data_som)


def run(config):
    import sys
    
    if config.data is None:
        raise RuntimeError, "Need to pass a data filename to the driver "\
        +"script."

    import DST

    try:
        data_dst = DST.getInstance("application/x-NeXus", config.data) 
    except SystemError:
        print "ERROR: Failed to data read file %s" % config.data
        sys.exit(-1)

    so_axis = "time_of_flight"
        
    if config.norm is not None:
        if config.verbose:
            print "Reading in monitor data from data file"

        m_som1 = data_dst.getSOM(config.mon_path, so_axis)
    else:
        m_som1 = None

    m_som2 = convert_mon_tof_to_wavelength(config, m_som1)

    m_som1 = None
    del m_som1
    
    if config.mon_eff is None:
        m_eff2 = None
    else:
        try:
            config.mon_eff.title()
            if config.verbose:
                print "Reading monitor efficiency file"
                
            mon_eff_dst = DST.getInstance("text/xml", config.mon_eff)
            m_eff1 = mon_eff_dst.getSOM(config.mon_path)
            mon_eff_dst.release_resource()
            if config.verbose:
                print "Rebinning monitor efficiency"

            m_eff2 = rebin_mon_eff(config, m_som2, m_eff1)

            m_eff1 = None
            del m_eff1
                    
        except AttributeError:
            m_eff2 = config.mon_eff

    if config.verbose and m_eff2 is not None:
        print "Correcting monitor data for efficiency"
        
    m_som3 = eff_correct_mon(config, m_som2, m_eff2)
    
    m_som2 = None
    del m_som2

    d_som1 = data_dst.getSOM(config.data_paths, so_axis)

    bkg_som1 = None
    
    d_som2 = subtract_bkg_from_data(config, d_som1, bkg_som1)

    d_som1 = None
    del d_som1

    if not config.norm is None:
        if config.verbose:
            print "Reading normalization file"
            
        norm_dst = DST.getInstance("application/x-NeXus", config.norm)
        n_som1 = norm_dst.getSOM(config.mon_path, so_axis)
        norm_dst.release_resource()
    else:
        n_som1 = None

    m_som4 = calc_inc_spec_factor(config, n_som1, m_som3)

    n_som1 = None
    m_som3 = None
    del m_som3, n_som1
    
    m_som5 = scale_inc_spec_factor(config, m_som4)

    m_som4 = None
    del m_som4
    
    rebin_inc_spec_factor(config)
    
    d_som3 = norm_data_by_inc_spec_factor(config, d_som2, isf_som)

    d_som2 = None
    del d_som2

    #d_som4 = sum_rois(config, d_som3)
    
    #d_som5 = convert_data_wavelength_to_scalar_Q(config, d_som4)
 

if __name__=="__main__":
    import common_lib
    import dr_lib
    import hlr_utils
    
    # set up the options available
    parser = hlr_utils.SNSOptions("usage: %prog [options] <datafile>",
                                  inst="REF")

    # Add REF specific options
    parser.add_option("", "--geom-factor", dest="geom_factor",
                      help="Specify the geometry factor G, err^2")
    
    parser.add_option("","--det-angle", dest="det_angle",
                      help="Specify the detector inclination angle, err^2")
    
    parser.add_option("","--mon-eff", dest="mon_eff",
                      help="Specify the monitor efficiency file or an "\
                      +"efficiency tuple (efficiency,error^2)")
    
    parser.add_option("","--data-paths", dest="data_paths",
                      help="Specify the comma separated list of detector data"\
                      +"paths and signals. Default is /entry/bank1,1")
    parser.set_defaults(data_paths="/entry/bank1,1")
    
    parser.add_option("","--mon-path", dest="mon_path",
                      help="Specify the comma separated list of monitor "\
                      +"path and signal. Default is /entry/monitor,1")
    parser.set_defaults(mon_path="/entry/monitor,1")

    (options, args) = parser.parse_args()
    
    # set up the configuration
    config = hlr_utils.Configure()
    # get the datafile name and check it
    if len(args) == 1:
        config.data = args[0]
        if not hlr_utils.file_exists(config.data):
            parser.error("Data file [%s] does not exist" % config.data)
    else:
        parser.error("Did not specify a datafile")
    # create the output file name if there isn't one supplied
    if options.output:
        config.output = options.output
    else:
        config.output = hlr_utils.ext_replace(config.data, "nxs", "txt")
        print "Using %s as output file" % config.output

    # set the verbosity
    config.verbose = options.verbose

    config.norm = hlr_utils.fix_filename(options.norm)
    if config.norm is not None:
        if not hlr_utils.file_exists(config.norm):
            parser.error("Normalization file [%s] does not exist" \
                         % config.norm)
        else:
            pass
    else:
        pass

    if options.mon_eff is not None:
        try:
            config.mon_eff = hlr_utils.split_values(options.mon_eff)
        except ValueError:
            config.mon_eff = options.mon_eff
            if not hlr_utils.file_exists(config.mon_eff):
                parser.error("Monitor efficiency file [%s] does not exist" \
                             % config.mon_eff)
            else:
                pass
    else:
        config.mon_eff = options.mon_eff 

    # set the data paths
    config.data_paths = hlr_utils.create_data_paths(options.data_paths)

    # set the monitor path
    config.mon_path = hlr_utils.create_data_path(options.mon_path)

    if options.geom_factor is not None:
        config.geom_factor = hlr_utils.split_values(options.geom_factor)
    else:
        config.geom_factor = options.geom_factor

    if options.det_angle is not None:
        config.det_angle = hlr_utils.split_values(options.det_angle)
    else:
        config.det_angle = options.det_angle

    # run the program
    run(config)
