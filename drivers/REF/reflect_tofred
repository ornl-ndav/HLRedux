#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

def determine_background(conf, bkg_som, btype="sample"):

    if conf.no_bkg and btype == "sample":
        return None
    elif conf.no_norm_bkg and btype == "norm":
        return None
    else:
        bkg_som1 = dr_lib.sum_all_spectra(bkg_som)
        if conf.verbose:
            print "Background counts:", dr_lib.integrate_axis(bkg_som1)
        ratio = (1.0 / float(len(bkg_som)), 0.0)
        return common_lib.mult_ncerr(bkg_som1, ratio)

def run(config, tim):

    if config.data is None:
        raise RuntimeError("Need to pass a data filename to the driver "\
                           +"script.")

    if tim is not None:
        old_time = tim.getOldTime()

    so_axis = "time_of_flight"

    (d_som1, b_som1) = dr_lib.add_files(config.data,
                                        Data_Paths=config.data_paths,
                                        SO_Axis=so_axis,
                                        Signal_ROI=config.signal_roi_file,
                                        Bkg_ROI=config.bkg_roi_file,
                                        Verbose=config.verbose,
                                        Timer=tim)

    if config.dump_specular:
        if tim is not None:
            tim.getTime(False)
        
        d_som1_1 = dr_lib.sum_all_spectra(d_som1)

        if tim is not None:
            tim.getTime(msg="After summing signal spectra")
        if config.verbose:
            print "Signal counts:", dr_lib.integrate_axis(d_som1_1)

        hlr_utils.write_file(config.data[0], "text/Spec", d_som1_1,
                             output_ext="sdc", verbose=config.verbose,
                             message="combined specular TOF information")
        del d_som1_1

    if config.verbose and not config.no_bkg:
        print "Determining background"

    if tim is not None:
        tim.getTime(False)

    B = determine_background(config, b_som1)

    if tim is not None:
        tim.getTime(msg="After background determination")

    if not config.no_bkg and config.dump_bkg:
        hlr_utils.write_file(config.data[0], "text/Spec", B,
                             output_ext="bkg", verbose=config.verbose,
                             message="combined background TOF information")

    d_som2 = dr_lib.subtract_bkg_from_data(d_som1, B[0],
                                           verbose=config.verbose,
                                           timer=tim,
                                           dataset1="data",
                                           dataset2="background")

    del d_som1

    if config.verbose:
        print "Combining data spectra"

    if tim is not None:
        tim.getTime(False)

    d_som3 = dr_lib.sum_all_spectra(d_som2, y_sort=True,
                                    stripe=not config.combine)

    if tim is not None:
        tim.getTime(msg="After combining signal spectra")

    del d_som2
    
    if config.dump_sub:
        hlr_utils.write_file(config.data[0], "text/Spec", d_som3,
                             output_ext="sub", verbose=config.verbose,
                             message="combined subtracted TOF information")

    if config.norm is not None:
        if config.verbose:
            print "Reading normalization file"

        if tim is not None:
            tim.getTime(False)

        (nd_som1, nb_som1) = dr_lib.add_files(config.norm,
                                       Data_Paths=config.data_paths,
                                       SO_Axis=so_axis,
                                       Signal_ROI=config.norm_signal_roi_file,
                                       Bkg_ROI=config.norm_bkg_roi_file,
                                       dataset_type="norm",
                                       Verbose=config.verbose,
                                       Timer=tim)

        if tim is not None:
            tim.getTime(msg="After reading normalization file")
    else:
        nd_som1 = None
        nb_som1 = None

    if config.verbose and not config.no_norm_bkg and config.norm is not None:
        print "Determining normalization background"

    if tim is not None:
        tim.getTime(False)

    if config.norm is not None:
        B_n = determine_background(config, nb_som1, "norm")
    else:
        B_n = None

    if tim is not None and not config.no_norm_bkg and config.norm is not None:
        tim.getTime(msg="After normalization background determination")

    if not config.no_norm_bkg and B_n is not None and config.dump_norm_bkg:
        hlr_utils.write_file(config.data[0], "text/Spec", B_n,
                             output_ext="bnm", verbose=config.verbose,
                             message="combined normalization background TOF "\
                             +"information")

    del nb_som1

    if config.norm is not None:
        nd_som2 = dr_lib.subtract_bkg_from_data(nd_som1, B_n[0],
                                                verbose=config.verbose,
                                                timer=tim,
                                                dataset1="normalization",
                                                dataset2="background")
    else:
        nd_som2 = None

    del nd_som1

    if tim is not None:
        tim.getTime(False)

    if config.norm is not None:
        nd_som3 = dr_lib.sum_all_spectra(nd_som2)
    else:
        nd_som3 = None

    if config.dump_norm and config.norm is not None:
        hlr_utils.write_file(config.data[0], "text/Spec", nd_som3,
                             output_ext="nom", verbose=config.verbose,
                             message="combined normalization TOF information")

    del nd_som2

    if config.verbose and config.norm is not None:
        print "Normalizing data"

    if tim is not None:
        tim.getTime(False)

    if config.norm is not None:
        d_som4 = common_lib.div_ncerr(d_som3, nd_som3,
                                      length_one_som=not config.combine)
    else:
        d_som4 = d_som3

    if tim is not None and config.norm is not None:
        tim.getTime(msg="After normalizing signal spectra")

    del d_som3, nd_som3

    if config.det_angle is None:
        d_som4.attr_list["detector_angle"] = (0.0, "degree")
    else:
        d_som4.attr_list["detector_angle"] = config.det_angle

    hlr_utils.write_file(config.output, "text/Spec", d_som4, replace_ext=False,
                         verbose=config.verbose,
                         message="combined Reflectivity information")

    d_som4.attr_list["config"] = config

    hlr_utils.write_file(config.data[0], "text/rmd", d_som4,
                         output_ext="rmd", verbose=config.verbose,
                         message="metadata")

    if tim is not None:
        tim.setOldTime(old_time)
        tim.getTime(msg="Completing driver")

if __name__ == "__main__":
    import os
    
    import common_lib
    import dr_lib
    import hlr_utils
    
    # set up the options available
    parser = hlr_utils.SNSOptions("usage: %prog [options] <datafile>", None,
                                  None, hlr_utils.program_version(), 
                                  inst="REF")

    # Set defaults for imported options
    parser.set_defaults(data_paths="/entry/bank1,1")
    
    # Add REF specific options
    parser.add_option("", "--det-angle", dest="det_angle",
                      help="Specify the detector inclination angle, err^2, "\
                      +"and units")

    parser.add_option("", "--dump-specular", action="store_true",
                      dest="dump_specular",
                      help="Flag to dump the combined specular TOF "\
                      +"information")
    parser.set_defaults(dump_specular=False)

    parser.add_option("", "--dump-norm", action="store_true",
                      dest="dump_norm",
                      help="Flag to dump the combined normalization TOF "\
                      +"information")
    parser.set_defaults(dump_norm=False)

    parser.add_option("", "--dump-sub", action="store_true",
                      dest="dump_sub",
                      help="Flag to dump the combined subtracted TOF "\
                      +"information")
    parser.set_defaults(dump_sub=False)

    parser.add_option("", "--dump-all", action="store_true", dest="dump_all",
                      help="Flag to dump combined information")
    parser.set_defaults(dump_all=False)

    parser.add_option("", "--no-bkg", action="store_true", dest="no_bkg",
                      help="Flag to turn off background estimation and "\
                      +"subtraction")
    parser.set_defaults(no_bkg=False)

    parser.add_option("", "--dump-bkg", action="store_true", dest="dump_bkg",
                      help="Flag to dump the combined background TOF "\
                      +"information")
    parser.set_defaults(dump_bkg=False)

    parser.add_option("", "--timing", action="store_true", dest="timing",
                      help="Flag to turn on timing of code")
    parser.set_defaults(timing=False)

    parser.add_option("", "--signal-roi-file", dest="signal_roi_file",
                      help="Specify the file containing the list pixel IDs "
                      +"for the signal region.")

    parser.add_option("", "--bkg-roi-file", dest="bkg_roi_file",
                      help="Specify the file containing the list pixel IDs "
                      +"for the background region.")

    parser.add_option("", "--norm-signal-roi-file",
                      dest="norm_signal_roi_file",
                      help="Specify the file containing the list pixel IDs "
                      +"for the normalization signal region.")

    parser.add_option("", "--norm-bkg-roi-file", dest="norm_bkg_roi_file",
                      help="Specify the file containing the list pixel IDs "
                      +"for the normalization background region.")    

    parser.add_option("", "--no-norm-bkg", action="store_true",
                      dest="no_norm_bkg",
                      help="Flag to turn off normalization background "\
                      +"estimation and subtraction")
    parser.set_defaults(no_norm_bkg=False)

    parser.add_option("", "--dump-norm-bkg", action="store_true",
                      dest="dump_norm_bkg",
                      help="Flag to dump the combined normalization "\
                      +"background TOF information")
    parser.set_defaults(dump_norm_bkg=False)

    parser.add_option("", "--combine", action="store_true", dest="combine",
                      help="Flag to combine all sample data spectra in one "\
                      +"spectrum")
    parser.set_defaults(combine=False)

    (options, args) = parser.parse_args()
    
    # set up the configuration
    configure = hlr_utils.Configure()
    
    # get the datafile name and check it
    if options.data is not None:
        configure.data = hlr_utils.determine_files(options.data, "REF_L",
                                                   stop_on_none=True)
    elif len(args) > 0:
        configure.data = hlr_utils.determine_files(args, "REF_L",
                                                   stop_on_none=True)
    else:
        parser.error("Did not specify a datafile")

    # create the output file name if there isn't one supplied
    if options.output is not None:
        configure.output = options.output
    else:
        outfile = os.path.basename(configure.data[0])
        path = os.path.join(os.getcwd(), outfile)
        configure.output = hlr_utils.ext_replace(path, "nxs", "txt")
        print "Using %s as output file" % configure.output

    # set the verbosity
    configure.verbose = options.verbose

    # get normalization files
    configure.norm = hlr_utils.determine_files(options.norm, "REF_L")    

    configure.inst_geom = hlr_utils.determine_files(options.inst_geom,
                                                    one_file=True)

    # get the data path for the signal ROI file
    configure.signal_roi_file = hlr_utils.determine_files(\
       options.signal_roi_file,
       one_file=True)
    
    # get the data path for the background ROI file
    configure.bkg_roi_file = hlr_utils.determine_files(\
       options.bkg_roi_file,
       one_file=True)
    
    # get the data path for the normalization signal ROI file
    if options.norm_signal_roi_file is not None:
        configure.norm_signal_roi_file = hlr_utils.determine_files(\
       options.norm_signal_roi_file,
       one_file=True)
    else:
        configure.norm_signal_roi_file = configure.signal_roi_file
    
    # get the data path for the normalization background ROI file
    if options.norm_bkg_roi_file is not None:
        configure.norm_bkg_roi_file = hlr_utils.determine_files(\
       options.norm_bkg_roi_file,
       one_file=True)
    else:
        configure.norm_bkg_roi_file = configure.bkg_roi_file
        
    # set the data paths
    configure.data_paths = hlr_utils.create_data_paths(options.data_paths)

    if options.det_angle is not None:
        configure.det_angle = hlr_utils.split_values(options.det_angle)
    else:
        configure.det_angle = options.det_angle

    # set the ability to turn off background estimation and subtraction
    configure.no_bkg = options.no_bkg

    # set the ability to turn off normalization background estimation
    # and subtraction
    configure.no_norm_bkg = options.no_norm_bkg

    # set the ability to combine sample data spectra into one spectrum
    configure.combine = options.combine

    # set the ability to dump the combined specular TOF information
    configure.dump_specular = options.dump_specular

    # set the ability to dump the combined background TOF information
    configure.dump_bkg = options.dump_bkg

    # set the ability to dump the combined normalization TOF information
    configure.dump_norm = options.dump_norm

    # set the ability to dump the combined subtracted TOF information
    configure.dump_sub = options.dump_sub

    # set the ability to dump the combined normalization background TOF
    # information
    configure.dump_norm_bkg = options.dump_norm_bkg

    if options.dump_all:
        configure.dump_specular = True
        configure.dump_bkg = True
        configure.dump_sub = True
        configure.dump_norm = True
        configure.dump_norm_bkg = True

    if options.timing:
        import sns_timing
        timer = sns_timing.DiffTime()
    else:
        timer = None
        
    # run the program
    run(configure, timer)

