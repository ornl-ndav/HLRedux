#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

"""
This program covers the functionality outlined in 2.4.4 Point detector
measurement of specular reflectivity in <CHANGE:DR_Lib_RS.doc>.
"""

def convert_data_tof_to_wavelength():
    """Step 1. Convert IDXY(TOF) to wavelength using function 3.15."""
    pass

def rebin_det_eff():
    """Step 2. Rebin IDXY(lambda) and epsilonDXY(lambda) with input
    binning strategy by using function 3.12."""
    pass

def eff_correct_data():
    """Step 3. Correct IDXY(lambda) for detector efficiency by using
    the function in 3.9 using IDXY(lambda) as data1 and
    epsilonDXY(lambda) as data2. The result is IeDXY(lambda)."""
    pass

def convert_mon_tof_to_wavelength():
    """Step 4. Convert IM1(TOF) to wavelength using function 3.15."""
    pass

def rebin_mon_eff():
    """Step 5. Rebin eM1(lamda) to IM1(lambdas)'s wavelength axis
    using 3.12. The input is the efficiency eM1(lambda) with the
    output being erM1(lambda)."""
    pass

def eff_correct_mon():
    """Step 6. Correct IM1(lambda) for detector efficiency by using
    the function in 3.9 using IM1(lambda) as data1 and erM1(lambda) as
    data2. The result is IeM1(lambda)."""
    pass

def subtract_bkg_from_data():
    """Step 7. Subtract the background using function 3.6 with
    IeDXY(lambda) as data1 and IeBXY(lambda) as data2. The result is
    IebDXY(lambda)."""
    pass

def calc_inc_spec_factor():
    """Step 8. Determine the incident spectrum factor by using
    function 3.9 with M(lambda) as data1 and IeM1(lambda) as
    data2. The result is the incident spectrum factor,
    1/IeM2(lambda). This is essentially one over the incident
    spectrum. This step is necessary due to the removal of monitor 2
    when performing sample measurements."""
    pass

def scale_inc_spec_factor():
    """Step 9. Scale the incident spectrum by the geometry factor
    using function 3.1 with 1/IeM2(lambda) as data1 and G as a. The
    result is the effective incident spectrum factor,
    Iinc(lambda). Note: Iinc(lambda) in not a raw spectrum as noted by
    section 0."""
    pass

def rebin_inc_spec_factor():
    """Step 10. Rebin Iinc(lambda) using with the same binning as
    IebDXY(lambda) by using function 3.12."""
    pass

def norm_data_by_inc_spec_factor():
    """Step 11. Normalize using the incident spectrum factor using
    function 3.8 with IebDXY(lambda) as data1 and Iinc(lambda) as
    data2. The result is the reflectivity, R(lambda)."""
    pass

def run():
    pass

if __name__ == "__main__":
    pass
