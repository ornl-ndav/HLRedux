#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

###############################################################################
#
# This script is the driver for the Null Integration Test Mark 2
#
# $Id$
#
###############################################################################

def print_time(tag, start, stop):
    mili = stop - start
    mili = int(1000 * (mili - int(mili)))
    start = int(start)
    stop = int(stop)
    sec = stop - start
    mins = int(sec / 60)
    sec = sec - mins * 60
    hour = int(mins / 60)
    mins = mins - hour * 60
    print "%s=%02d:%02d:%02d.%03d" % (tag, hour, mins, sec, mili)

def my_main(opts, filename_SOM12, filename_SOM3):
    # Import appropriate modules here. NOTE: $PYTHONPATH must reflect
    # where modules can be found.

    import common_lib
    import DST
    from time import time

    start_time = time()
    
    # Create data source translators for reading in two NeXus files

    dst1 = DST.getInstance("application/x-NeXus", filename_SOM12)
    dst2 = DST.getInstance("application/x-NeXus", filename_SOM12)

    # Retrieve the SOMs from the DSTs

    som_id = ("/entry/data", 1)
    so_axis = "time_of_flight"
    starting_ids = (20, 190)
    ending_ids = (30, 250)

    if(opts.short):
        SOM1 = dst1.getSOM(som_id, so_axis, start_id=starting_ids,
                           end_id=ending_ids)
        SOM2 = dst2.getSOM(som_id, so_axis, start_id=starting_ids,
                           end_id=ending_ids)
    else:
        SOM1 = dst1.getSOM(som_id, so_axis)
        SOM2 = dst2.getSOM(som_id, so_axis)

    if(opts.timing):
        print_time("CREATED SOM12", start_time, time())

    # Do the subtraction
    SOM3 = common_lib.sub_ncerr(SOM1, SOM2)

    SOM3.attr_list["filename"] = filename_SOM3
    SOM3.attr_list["operations"] = [("Step 1", "Subtraction (SOM1 - SOM2)")]
    SOM3.attr_list["parents"] = {"SOM1" : SOM1.attr_list["filename"],
                                 "SOM2" : SOM2.attr_list["filename"]}

    if(opts.timing):
        print_time("CREATED SOM3 ", start_time, time())

    # Create output file object

    resource = open(filename_SOM3, "w")
    
    # Create output formatting object for 3 column ASCII and pass it a
    # file object

    a3c = DST.getInstance("text/Spec", resource)

    # Push SOM3 into output formatter

    a3c.writeSOM(SOM3)

    # Close resource by issuing release_resource call on formatter

    a3c.release_resource()

    if(opts.timing):
        print_time("WROTE SOM3   ", start_time, time())

if __name__ == "__main__":
    import optparse

    import hlr_utils

    parser = optparse.OptionParser("usage: %prog [options] <datafile> "\
                                   +"<outfile>", None, optparse.Option,
                                   hlr_utils.program_version())
    parser.add_option("", "--timing", action="store_true",
                      help="Enable timing statements")
    parser.set_defaults(timing=False)
    
    parser.add_option("", "--profile", help="Specify the profile output name")
    
    parser.add_option("", "--short", action="store_true",
                      help="Run abbreviated test")
    parser.set_defaults(short=False)
    
    (options, args) = parser.parse_args()

    # Confirm the proper number of command line arguments
    if len(args) != 2:
        parser.error("incorrect number of arguments")
    
    if options.profile is not None:
        import profile
        profiler = profile.Profile()
        profiler.runcall(my_main, options, args[0], args[1])
        profiler.dump_stats(options.profile)
    else:
        my_main(options, args[0], args[1])
