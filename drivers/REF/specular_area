#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

"""
This program covers the functionality outlined in 2.4.3 Area detector
measurement of specular reflectivity in <CHANGE:DR_Lib_RS.doc>.
"""

def convert_mon_tof_to_wavelength(config, mon1_som):
    """Step 1. Convert IM1(TOF) to wavelength using function 3.15."""

    if mon1_som == None:
        return None
    else:
        return common_lib.tof_to_wavelength(mon1_som)
    

def rebin_mon_eff(config, mon1_som, mon1_eff):
    """Step 2. Rebin eM1(lamda) to IM1(lambdas)'s wavelength axis
    using 3.12. The input is the efficiency eM1(lambda) with the
    output being erM1(lambda)."""

    if mon1_eff == None:
        return mon1_som

    return common_lib.div_ncerr(mon1_som, mon1_eff)


def eff_correct_mon(config, mon1_som, mon1_eff):
    """Step 3. Correct IM1(lambda) for detector efficiency by using
    the function in 3.9 using IM1(lambda) as data1 and erM1(lambda) as
    data2. The result is IeM1(lambda)."""

    if mon1_eff == None:
        return mon1_som

    return common_lib.div_ncerr(mon1_som, mon1_eff)


def subtract_bkg_from_data(config):
    """Step 4. Subtract the background using function 3.7 with
    IeDXY(lambda) as data1 and IeBXY(lambda) as data2. The result is
    IebDXY(lambda)."""
    pass


def calc_inc_spec_factor(config, mrat_som, mon1_som):
    """Step 5. Determine the incident spectrum factor by using
    function 3.9 with M(lambda) as data1 and IeM1(lambda) as
    data2. The result is the incident spectrum factor,
    1/IeM2(lambda). This is essentially one over the incident
    spectrum. This step is necessary due to the removal of monitor 2
    when performing sample measurements."""

    if mrat_som == None:
        return mon1_som
    else:
        return common_lib.div_ncerr(mrat_som, mon1_som)


def scale_inc_spec_factor(config, isf_som):
    """Step 6. Scale the incident spectrum by the geometry factor
    using function 3.1 with 1/IeM2(lambda) as data1 and G as a. The
    result is the effective incident spectrum factor,
    Iinc(lambda). Note: Iinc(lambda) in not a raw spectrum as noted by
    section 0."""

    if isf_som == None:
        return None
    elif config.geom_factor == None:
        return isf_som
    else:
        return common_lib.div_ncerr(isf_som, config.geom_factor)


def rebin_inc_spec_factor(config):
    """Step 7. Rebin Iinc(lambda) using with the same binning as
    IebDXY(lambda) by using function 3.12."""
    pass


def norm_data_by_inc_spec_factor(config, data_som, isf_som):
    """Step 8. Normalize using the incident spectrum factor using
    function 3.9 with IebDXY(lambda) as data1 and Iinc(lambda) as
    data2. The result is the reflectivity, R(lambda)."""
    
    if isf_som == None:
        return data_som
    else:
        return common_lib.div_ncerr(data_som, isf_som)


def sum_rois(config):
    """Step 9. Sum the ROIs weighted by the uncertainties according to
    function 3.10."""
    pass


def convert_data_wavelength_to_scalar_Q(config, data_som):
    """This step is not in the requirements document and is only available by
    command-line switch."""

    return common_lib.wavlength_to_scalar_Q(data_som)


def run(config):
    import sys
    
    if config.data==None:
        raise RuntimeError, "Need to pass a data filename to the driver "\
        +"script."

    import DST

    try:
        data_dst = DST.getInstance("application/x-NeXus", config.data)
    except SystemError:
        print "ERROR: Failed to data read file %s" % config.data
        sys.exit(-1)

    if config.norm != None:
        if config.verbose:
            print "Reading in monitor data from data file"
            
        som_id = ("/entry/monitor1", 1)
        so_axis = "time_of_flight"
        m_som1 = data_dst.getSOM(som_id, so_axis)
    else:
        m_som1 = None

    m_som2 = convert_mon_tof_to_wavelength(config, m_som1)

    if m_som1 != None:
        m_som1 = None

    del m_som1
    
    if config.mon_eff==None:
        m_eff2 = None
    else:
        try:
            config.mon_eff.title()
            if config.verbose:
                print "Reading monitor efficiency file"
                
                mon_eff_dst = DST.getInstance("text/xml", config.mon_eff)
                m_eff1 = mon_eff_dst.getSOM("/entry/monitor2")
                mon_eff_dst.release_resource()
                if config.verbose:
                    print "Rebinning monitor efficiency"
                    m_eff2 = rebin_mon_eff(config, m_som2, m_eff1)

                    if m_eff1 != None:
                        m_eff1 = None
                        
                    del m_eff1
                    
        except AttributeError:
            m_eff2 = config.mon_eff

    if config.verbose and m_eff2 != None:
        print "Correcting monitor data for efficiency"
        
    m_som3 = eff_correct_mon(config, m_som2, m_eff2)
    
    if m_som2 != None:
        m_som2 = None

    del m_som2


if __name__=="__main__":
    import common_lib
    import dr_lib
    import hlr_utils
    
    # set up the options available
    parser=hlr_utils.SNSOptions("usage: %prog [options] <datafile>")

    # Add REF specific options
    parser.add_option("","--geom-factor",default=None,
                      dest="geom_factor",
                      help="Specify the geometry factor G, err^2")
    parser.add_option("","--det-angle",default=None,
                      dest="det_angle",
                      help="Specify the detector inclination angle, err^2")
    parser.add_option("","--mon-eff",default=None, dest="mon_eff",
                      help="Specify the monitor efficiency file or an "\
                      +"efficiency tuple (efficiency,error^2)")


    (options,args)=parser.parse_args()
    
    # set up the configuration
    config=hlr_utils.Configure()
    # get the datafile name and check it
    if len(args)==1:
        config.data=args[0]
        if not hlr_utils.file_exists(config.data):
            parser.error("Data file [%s] does not exist" % config.data)
    else:
        parser.error("Did not specify a datafile")
    # create the output file name if there isn't one supplied
    if options.output:
        config.output=options.output
    else:
        config.output=hlr_utils.ext_replace(config.data, "nxs", "txt")
        print "Using %s as output file" % config.output

    # set the verbosity
    config.verbose=options.verbose

    config.norm=options.norm
    if config.norm != None:
        if not hlr_utils.file_exists(config.norm):
            parser.error("Normalization file [%s] does not exist" \
                         % config.norm)

    if options.mon_eff != None:
        try:
            config.mon_eff=hlr_utils.split_val_err2(options.mon_eff)
        except ValueError:
            config.mon_eff=options.mon_eff
            if not hlr_utils.file_exists(config.mon_eff):
                parser.error("Monitor efficiency file [%s] does not exist" \
                             % config.mon_eff)

    if options.geom_factor != None:
        config.geom_factor=hlr_utils.split_val_err2(options.geom_factor)

    if options.det_angle != None:
        config.det_angle=hlr_utils.split_val_err2(options.det_angle)

    # run the program
    run(config)
