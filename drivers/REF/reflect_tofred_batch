#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

import os
import sns_inst_util

COMMAND = "reflect_tofred"

def run_cmd(cmd, lines=True):
    fin, fout = os.popen4(cmd)
    if lines:
        return fout.readlines()
    else:
        return fout.read()

def clean_str(string):
    return string.rstrip().rstrip(os.linesep)

if __name__ == "__main__":
    import optparse
    import sys

    import hlr_utils

    parser = optparse.OptionParser("usage: %prog [options] <runnumber>", None,
                                   optparse.Option,
                                   hlr_utils.program_version())
    parser.add_option("-i", "--inst" , dest="inst",
                      help="Specify the instrument name. Default is REF_L.")
    parser.set_defaults(inst="REF_L")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Enable verbose print statements")
    parser.add_option("-q", "--quiet", action="store_false", dest="verbose",
                      help="Disable verbose print statements")
    parser.set_defaults(verbose=False)
    parser.add_option("-n", "--norm", dest="norm",
                      help="Normalization runs")
    
    (options, args) = parser.parse_args()
    if options.verbose:
        options.multi = True

    inst = options.inst
    (runs, redArgs) = sns_inst_util.splitArgs(args, sys.argv, options)
    if len(inst) <= 0:
        parser.error("NO INSTRUMENT SPECIFIED")
    if len(runs) <= 0:
        parser.error("NO RUNS SPECIFIED")
        
    runlist = []

    for run in runs:
        cmd = "findnexus -i %s %s" % (inst, run)
        if options.verbose:
            print "Cmd:",cmd
        mylist = run_cmd(cmd)
        for myl in mylist:
            runlist.append(clean_str(myl))

    if options.verbose:
        print "R:",runlist

    runs = " ".join(runlist)

    if options.norm is not None:
        cmd = "findnexus -s -i %s %s" % (inst, options.norm) 
        norm = clean_str(run_cmd(cmd, False))
        normlist = norm.split(' ')
        if options.verbose:
            print "N:",normlist
        redArgs += (" --norm=%s" % ",".join(normlist))

    command = "%s %s %s" % (COMMAND, runs, redArgs)
    if options.verbose:
        print "Command:",command
    os.system(command)
