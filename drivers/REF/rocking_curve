#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

def run(config):
    pass

if __name__=="__main__":
    import os
    
    import common_lib
    import dr_lib
    import hlr_utils
    
    # set up the options available
    parser = hlr_utils.BasicOptions("usage: %prog [options] <datafile>")
    
    # Add REF specific options
    parser.add_option("", "--data-paths", dest="data_paths",
                      help="Specify the comma separated list of detector data"\
                      +"paths and signals. Default is /entry/bank1,1")
    parser.set_defaults(data_paths="/entry/bank1,1")
    
    (options, args) = parser.parse_args()

    # set up the configuration
    config = hlr_utils.Configure()

    # get the datafile name and check it
    if len(args) == 1:
        config.data = args[0]
        if not hlr_utils.file_exists(config.data):
            parser.error("Data file [%s] does not exist" % config.data)
        else:
            parser.error("Did not specify a datafile")
            
    # create the output file name if there isn't one supplied
    if options.output is not None:
        config.output = options.output
    else:
        file = os.path.basename(config.data)
        path = os.path.join(os.getcwd(), file)
        config.output = hlr_utils.ext_replace(path, "nxs", "txt")
        print "Using %s as output file" % config.output

    # set the verbosity
    config.verbose = options.verbose

    # run the program
    run(config)
        
