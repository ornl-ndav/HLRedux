#!/usr/bin/env python

#                  High-Level Reduction Functions
#           A part of the SNS Analysis Software Suite.
#
#                  Spallation Neutron Source
#          Oak Ridge National Laboratory, Oak Ridge TN.
#
#
#                             NOTICE
#
# For this software and its associated documentation, permission is granted
# to reproduce, prepare derivative works, and distribute copies to the public
# for any purpose and without fee.
#
# This material was prepared as an account of work sponsored by an agency of
# the United States Government.  Neither the United States Government nor the
# United States Department of Energy, nor any of their employees, makes any
# warranty, express or implied, or assumes any legal liability or
# responsibility for the accuracy, completeness, or usefulness of any
# information, apparatus, product, or process disclosed, or represents that
# its use would not infringe privately owned rights.
#

# $Id$

"""
This program covers the functionality outlined in 2.2.1 Powder or
amorphous material reduction in <CHANGE:DR_Lib_RS.doc>.
"""

class Configure:
    def __init__(self):
        self.verbose=None
        self.data=None
        self.output=None
        self.dead_time=None
        self.dead_time_units=None
        self.norm=None
        self.norm_bkg=None
        self.dark_count=None
        self.no_tib=None # don't perform time-independent background
        self.bkg=None
        self.no_norm=None # this should be implicit from whether the
                          # normalization data is specified
        self.no_mon_norm=None
        self.mon_geom=None
        self.det_geom=None
        self.mon_eff=None
        self.det_eff=None
        self.Q_bins=None
        self.E_bins=None
        self.banks_separate=None # should be a description of how to
                                 # combine banks
        self.TOF_start=None
        self.TOF_end=None
        self.mon_start=None
        self.mon_end=None
        self.wavelength_final=None
        self.time_zero=None


def dead_time_correction(config, data_som):
    """Step 1. Apply dead time correction to each I(TOF) using
    function 3.38. The result is ItiXY(TOF)."""

    return data_som


def subtract_norm_bkg_from_norm(config,norm_som, norm_bkg_som):
    """Step 2. Subtract measured normalization background using 3.6
    with ItNXY(TOF) as data1 and ItNBXY(TOF) as data2. The result is
    ItbNXY(TOF)."""

    if norm_som==None:
        return None
    elif norm_bkg_som==None:
        return norm_som

    return common_lib.sub_ncerr(norm_som, norm_bkg_som)


def subtract_dark_count_from_data(config, data_som, dc_som):
    """Step 3. Subtract the dark count spectrum using function 3.6
    with ItDXY(TOF) as data1 and ItDCXY(TOF) as data2. The result of
    this is ItdDXY(TOF)."""

    if dc_som==None:
        return data_som

    return common_lib.sub_ncerr(data_som, dc_som)


def determine_time_indep_bkg(config, data_som):
    """Step 4. Determine the sample dependent, time independent
    background B by fitting a line to predetermined end points of
    ItdDXY(TOF) using function 3.43."""

    kwargs = {}

    if not config.TOF_start==None:
        kwargs["start"]=config.TOF_start

    if not config.TOF_end==None:
        kwargs["end"]=config.TOF_end

    return common_lib.weighted_average(data_som, **kwargs)


def subtract_time_indep_bkg(config, data_som, B):
    """Step 5. Subtract B from the data spectrum using function 3.2
    with ItdDXY(TOF) as data1 and B as a. The result is ItdsDXY(TOF)."""

    if B == None:
        return data_som

    return dr_lib.subtract_time_indep_bkg(data_som, B)


def subtract_bkg_from_data(config, data_som, bkg_som):
    """Step 6. Subtract the measured background spectrum from the data
    spectrum using function 3.6 with ItdsDXY(TOF) as data1 and
    ItBXY(TOF) as data2. The result of this is ItdsbDXY(TOF)."""

    if bkg_som == None:
        return data_som

    return common_lib.sub_ncerr(data_som, bkg_som)


def norm_data_by_van(config, data_som, norm_som):
    """Step 7. Normalize ItdsbDXY(TOF) by vanadium spectrum,
    ItbNXY(TOF), using function 3.9. The result is ItdsbnDXY(TOF)."""

    if norm_som == None:
        return data_som

    return common_lib.div_ncerr(data_som, norm_som)


def convert_data_and_mon_to_wavelength(config, data_som, mon2_som):
    """Step 8. Convert ItM2(TOF) and ItdsbnDXY(TOF) to ItM2(lambda)
    and ItdsbnDXY(lambda) using function 3.15 for M2 and function 3.29
    for DXY."""

    if mon2_som!=None:
        mon2_som1 = common_lib.tof_to_wavelength(mon2_som,None,
                                                 "microsecond")
    else:
        mon2_som1 = None

    data_som1=common_lib.tof_to_initial_wavelength_igs(data_som,
                                                       None,None,
                                                       None,None,
                                                       "microsecond")

    return data_som1, mon2_som1


def rebin_mon_eff(config, mon2_som, mon2_eff):
    """Step 9. Rebin the monitor efficiency to each monitor's
    wavelength axis using 3.12. The input is the efficiency
    eM2(lambda) with the output being erM2(lambda)."""

    return dr_lib.rebin_efficiency(mon2_som, mon2_eff)


def eff_correct_mon(config, mon2_som, mon2_eff):
    """Step 10. Divide ItM2(lambda) by erM2(lambda) using function
    3.9. The result is IeM2(lambda)."""

    if mon2_eff == None:
        return mon2_som

    return common_lib.div_ncerr(mon2_som, mon2_eff)


def rebin_det_eff(config, data_som, det_eff):
    """Step 11. Rebin eDXY(lambda) to the same binning in wavelength
    as ItbdnDXY(lambda) by using function 3.12. The result is
    erDXY(lambda)"""

    return dr_lib.rebin_efficiency(data_som, det_eff)


def eff_correct_data(config, data_som, det_eff):
    """Step 12. Correct ItbdneDXY(lambda) for detector efficiency by
    using the function in 3.9 using ItbdnDXY(lambda) as data1 and
    erDXY(lambda) as data2. The result is ItbdneDXY(lambda)."""

    if det_eff==None:
        return data_som

    return common_lib.div_ncerr(data_som, det_eff)


def norm_data_by_mon(config, data_som, mon_som):
    """Step 13. Normalize by the integrated monitor intensity using
    3.5 using ItbdneDXY(lambda) as data1 and IteM2(lambda) as a. The
    result of this is S(lambda)."""

    if mon_som==None:
        return data_som

    kwargs = {}

    if not config.mon_start==None:
        kwargs["start"]=config.mon_start

    if not config.mon_end==None:
        kwargs["end"]=config.mon_end

    int_mon_int = dr_lib.integrate_axis(mon_som, **kwargs)

    return common_lib.div_ncerr(data_som, int_mon_int)


def calc_E_initial(config, data_som):
    """Step 15. Calculate incident energy using function 3.22."""

    return common_lib.wavelength_to_energy(data_som)


def calc_E_final(config):
    """Step 17. Calculate final energy using function 3.22."""

    return common_lib.wavelength_to_energy(config.wavelength_final)


def calc_energy_transfer(config, data_som, energy_final):
    """Step 18. Calculate energy transfer using function 3.30."""

    data_som1 = common_lib.energy_transfer(data_som, energy_final)

    data_som = None
    del data_som

    data_som2 = common_lib.frequency_to_energy(data_som1)

    data_som1 = None
    del data_som1

    data_som2.setYLabel("counts")
    data_som2.setYUnits("counts / ueV")
    data_som2.setAxisUnits(0, "ueV")

    data_som3 = common_lib.mult_ncerr(data_som2, (1000.0,0.0), axis="x")

    data_som2 = None
    del data_som2

    return common_lib.mult_ncerr(data_som3, (1.0/1000.0,0.0), axis="y")


def create_final(config, data_som):
    """Combines Steps 14,16,19,20 and 21 to create final 2D spectrum"""

    return dr_lib.create_2D_dist(data_som,config.E_bins,config.Q_bins,
                                 so_id="Full Detector",
                                 y_label="counts",
                                 y_units="counts / (ueV * A^-1)",
                                 x_labels=["Q transfer","energy transfer"],
                                 x_units=["1/Angstroms","ueV"])


def run(config):
    import sys
    
    if config.data==None:
        raise RuntimeError, "Need to pass a data filename to the driver "\
        +"script."

    import DST

    try:
        data_dst = DST.getInstance("application/x-NeXus", config.data)
    except SystemError:
        print "ERROR: Failed to data read file %s" % config.data
        sys.exit(-1)

    so_axis = "time_of_flight"

    if config.verbose:
        print "Reading data file"

    d_som1 = data_dst.getSOM(config.data_paths)

    if config.dead_time!=None:
        if config.verbose:
            print "Doing dead-time correction"
            
        d_som2 = dead_time_correction(config, d_som1)
    else:
        d_som2 = d_som1
        
    if config.verbose:
        print "1:", sys.getrefcount(d_som1)
        print "1:", sys.getrefcount(d_som2)

    d_som1 = None
    del d_som1

    if not config.norm==None:
        if config.verbose:
            print "Reading normalization file"
            
        norm_dst = DST.getInstance("application/x-NeXus", config.norm)
        n_som1 = norm_dst.getSOM(som_id, so_axis)
        norm_dst.release_resource()
    else:
        n_som1 = None

    if not config.norm_bkg==None:
        if config.verbose:
            print "Reading normalization background file"
            
        norm_bkg_dst = DST.getInstance("application/x-NeXus", config.norm_bkg)
        n_bkg_som1 = norm_bkg_dst.getSOM(som_id, so_axis)
        n_bkg_som1.release_resource()
    else:
        n_bkg_som1 = None

    if config.verbose and n_bkg_som1 != None:
        print "Subtracting background for normalization"
        
    n_som2 = subtract_norm_bkg_from_norm(config, n_som1, n_bkg_som1)

    n_bkg_som1 = None
    n_som1 = None

    del n_bkg_som1, n_som1

    if not config.dark_count==None:
        if option.verbose:
            print "Reading dark count file"
            
        dc_dst = DST.getInstance("application/x-NeXus", config.dark_count)
        dc_som1 = dc_dst.getSOM(som_id, so_axis)
        dc_dst.release_resource()
    else:
        dc_som1 = None

    if config.verbose and dc_som1 != None:
        print "Subtracting dark count from data"
        
    d_som3 = subtract_dark_count_from_data(config, d_som2, dc_som1)

    if config.verbose:
        print "2:", sys.getrefcount(d_som2)

    d_som2 = None
    dc_som1 = None

    del d_som2, dc_som1
    
    if not config.no_tib:
        if config.verbose:
            print "Determining time-independent background from data"
            
        B = determine_time_indep_bkg(config, d_som3)
    else:
        B = None

    if config.verbose and B != None:
        print "Subtracting time-independent background from data"
        
    d_som4 = subtract_time_indep_bkg(config, d_som3, B)

    if config.verbose:
        print "3:", sys.getrefcount(d_som3)
        print "4:", sys.getrefcount(B)
    
    d_som3 = None
    B = None

    del d_som3, B

    if not config.data_bkg==None:
        if config.verbose:
            print "Reading in background data file"
            
        bkg_dst = DST.getInstance("application/x-NeXus", config.data_bkg)
        bkg_som1 = bkg_dst.getSOM(som_id, so_axis)
        bkg_dst.release_resource()
    else:
        bkg_som1 = None

    if config.verbose and bkg_som1 != None:
        print "Subtracting background from data"
        
    d_som5 = subtract_bkg_from_data(config, d_som4, bkg_som1)

    if config.verbose:
        print "5:", sys.getrefcount(d_som4)

    d_som4 = None
    bkg_som4 = None
        
    del d_som4, bkg_som1

    if config.verbose and n_som2 != None:
        print "Normalizing data by normalization data"

    d_som6 = norm_data_by_van(config, d_som5, n_som2)

    if config.verbose:
        print "6:", sys.getrefcount(d_som5)

    d_som5 = None
    n_som2 = None
        
    del d_som5, n_som2

    if config.no_mon_norm:
        m_som1 = None
    else:
        if config.verbose:
            print "Reading in monitor data from data file"
        som_id = config.mon_path
        m_som1 = data_dst.getSOM(som_id, so_axis)

    # Note: wavelength_final MUST be a tuple
    if config.wavelength_final==None:
        try:
            config.wavelength_final = d_som6.attr_list["Wavelength_final"]
        except KeyError:
            raise RuntimeError, "A final wavelength was not provided on the "\
                  +"command-line nor in the data file. Please provide one."
    else:
        d_som6.attr_list["Wavelength_final"]=config.wavelength_final

    # Note: time_zero MUST be a tuple
    if config.time_zero==None:
        try:
            config.time_zero = d_som6.attr_list["Time_zero"]
        except KeyError:
            config.time_zero = (0.0, 0.0)
            d_som6.attr_list["Time_zero"]=config.time_zero
    else:
        d_som6.attr_list["Time_zero"]=config.time_zero

    data_dst.release_resource()

    if config.mon_geom:
        if config.verbose:
            print "Reading monitor geometry file"
            
        mon_geom_dst = DST.getInstance("text/xml", config.mon_geom)
        mon_geom = mon_geom_dst.getGeometry()
        mon_geom_dst.release_resource()
        m_som1.setGeometry(mon_geom)

    if config.det_geom:
        if config.verbose:
            print "Reading in detector geometry file"
            
        det_geom_dst = DST.getInstance("text/xml", config.det_geom)
        det_geom = det_geom_dst.getGeometry()
        det_geom_dst.release_resource()
        d_som6.setGeometry(det_geom)

    if config.verbose:
        print "Converting TOF to wavelength"

    #BEGIN SNS-FIXME#
    import SOM
    d_som6.attr_list.instrument = SOM.ASG_Instrument()
    if m_som1 != None:
        m_som1.attr_list.instrument = SOM.ASG_Instrument()
    #END SNS-FIXME#
        
    d_som7, m_som2 = convert_data_and_mon_to_wavelength(config, d_som6, m_som1)

    d_som6 = None
    m_som1 = None

    if config.verbose:
        print "7:", sys.getrefcount(d_som6)

    if config.dump_wave:
        file = os.path.basename(config.data)
        path = os.path.join(os.getcwd(), file)
        pixel_file=hlr_utils.ext_replace(path, "nxs", "pxl")
        resource = open(pixel_file, "w") 
        a3c = DST.getInstance("text/Spec", resource)
        if config.verbose:
            print "Writing pixel wavelength information"
        
        a3c.writeSOM(d_som7) 
        a3c.release_resource() 

    del d_som6, m_som1

    if config.mon_eff==None:
        m_eff2 = None
    else:
        try:
            config.mon_eff.title()
            if config.verbose:
                print "Reading monitor efficiency file"
                
            mon_eff_dst = DST.getInstance("text/xml", config.mon_eff)
            m_eff1 = mon_eff_dst.getSOM("/entry/monitor2")
            mon_eff_dst.release_resource()
            if config.verbose:
                print "Rebinning monitor efficiency"

            m_eff2 = rebin_mon_eff(config, m_som2, m_eff1)
                
            m_eff1 = None
            del m_eff1
                    
        except AttributeError:
            m_eff2 = config.mon_eff

    if config.verbose and m_eff2 != None:
        print "Correcting monitor data for efficiency"
        
    m_som3 = eff_correct_mon(config, m_som2, m_eff2)

    m_som2 = None
    del m_som2

    if config.det_eff==None:
        det_eff2 = None
    else:
        try:
            config.det_eff.title()
            if config.verbose:
                print "Reading detector efficiency file"
                
            det_eff_dst = DST.getInstance("text/xml", config.det_eff)
            det_eff1 = det_eff_dst.getSOM("/entry/dectector")
            det_eff_dst.release_resource()
            if config.verbose:
                print "Rebinning detector efficiency"

            det_eff2 = rebin_det_eff(config, d_som7, det_eff1)

            det_eff1 = None
            del det_eff1

        except AttributeError:
            det_eff2 = config.det_eff

    if config.verbose and det_eff2 != None:
        print "Correcting data for detector efficiency"

    d_som8 = eff_correct_data(config, d_som7, det_eff2)

    det_eff2 = None
    del det_eff2

    if config.verbose:
        print "8:", sys.getrefcount(d_som7)

    d_som7 = None
    del d_som7

    if config.verbose and m_som3 != None:
        print "Normalizing data by monitor"
        
    d_som9 = norm_data_by_mon(config, d_som8, m_som3)

    if config.verbose:
        print "9:", sys.getrefcount(d_som8)

    d_som8 = None
    del d_som8

    if config.verbose:
        print "Converting initial wavelength to E_initial"
        
    d_som11 = calc_E_initial(config, d_som9)

    if config.verbose:
        print "10:", sys.getrefcount(d_som9)
    
    d_som9 = None
    del d_som9

    if config.verbose:
        print "Converting final wavelength to E_final"
        
    E_final = calc_E_final(config)

    if config.verbose:
        print "Calculating energy transfer"
        
    d_som12 = calc_energy_transfer(config, d_som11, E_final)

    if config.dump_energy:
        file = os.path.basename(config.data)
        path = os.path.join(os.getcwd(), file)
        pixel_file=hlr_utils.ext_replace(path, "nxs", "exl")
        resource = open(pixel_file, "w") 
        a3c = DST.getInstance("text/Spec", resource)
        if config.verbose:
            print "Writing pixel energy transfer information"
        
        a3c.writeSOM(d_som12) 
        a3c.release_resource() 


    if config.verbose:
        print "Creating 2D spectrum"
        
    d_som13 = create_final(config,d_som12)

    d_som12 = None
    del d_som12

    # Writing 2D DAVE file

    resource = open(config.output, "w")
    d2d = DST.getInstance("text/Dave2d", resource)
    if config.verbose:
        print "Writing data"
        
    d2d.writeSOM(d_som13)

    d2d.release_resource()

if __name__=="__main__":
    import common_lib
    import dr_lib
    import hlr_utils
    import os
    
    # set up the options available
    parser=hlr_utils.SNSOptions("usage: %prog [options] <datafile>")

    # Add BSS specific options
    parser.add_option("","--dead-time",default=None,dest="dead_time",
                      help="Dead time with units (no spaces)")
    parser.add_option("","--tof-start",default=None,dest="TOF_start",
                      help="Specify the starting TOF bin for time-independent"\
                      +"background estimation")
    parser.add_option("","--tof-end",default=None,dest="TOF_end",
                      help="Specify the ending TOF bin for time-independent"\
                      +"background estimation")
    parser.add_option("","--no-mon-norm",action="store_true",
                      dest="no_mon_norm",
                      help="Flag for turning off monitor normalization")
    parser.add_option("","--mon-start",default=None,dest="mon_start",
                      help="Specify the starting bin for monitor integration")
    parser.add_option("","--mon-end",default=None,dest="mon_end",
                      help="Specify the ending bin for monitor")
    parser.add_option("","--no-tib",action="store_true",
                      dest="no_tib",
                      help="Flag for turning off time-independent background"\
                      +"subtraction")
    parser.add_option("","--final-wavelength",default=None,
                      dest="wavelength_final",
                      help="Specify the final wavelength"\
                      +" lambda, err^2 in Angstroms")
    parser.add_option("","--time-zero",default=None,
                      dest="time_zero",
                      help="Specify the time zero offset"\
                      +" t_0, err^2 in microseconds")
    parser.add_option("","--mon-eff",default=None, dest="mon_eff",
                      help="Specify the monitor efficiency file or an "\
                      +"efficiency tuple (efficiency,error2)")
    parser.add_option("","--det-eff",default=None, dest="det_eff",
                      help="Specify the detector efficiency file or an "\
                      +"efficiency tuple (efficiency,error2)")
    parser.add_option("","--mon-geom",default=None, dest="mon_geom",
                      help="Specify the monitor geometry file")
    parser.add_option("","--det-geom",default=None, dest="det_geom",
                      help="Specify the detector geometry file")
    parser.add_option("","--energy-bins",default=None,
                      dest="E_bins",
                      help="Specify the minimum and maximum energy values and"\
                      +" the energy bin width in ueV")
    parser.add_option("","--mom-trans-bins",default=None,
                      dest="Q_bins",
                      help="Specify the minimum and maximum momentum transfer"\
                      +" values and the momentum transfer bin width in"\
                      +" Angstroms^-1")
    parser.add_option("","--dump-wave",default=False,action="store_true",
                      dest="dump_wave",
                      help="Flag to dump the wavelength information for all"\
                      +" pixels")
    parser.add_option("","--dump-energy",default=False,action="store_true",
                      dest="dump_energy",
                      help="Flag to dump the energy transfer information for"\
                      +" all pixels")
    parser.add_option("","--data-paths",default=None,dest="data_paths",
                      help="Specify the comma separated list of detector data"\
                      +"paths and signals: /entry/bank1,1/entry/bank2,1")
    parser.add_option("","--mon-path",default=None,dest="mon_path",
                      help="Specify the comma separated list of monitor "\
                      +"path and signal: /entry/monitor,1")
    
    (options,args)=parser.parse_args()

    # set up the configuration
    config=Configure()
    # get the datafile name and check it
    if len(args)==1:
        config.data=args[0]
        if not hlr_utils.file_exists(config.data):
            parser.error("Data file [%s] does not exist" % config.data)
    else:
        if options.data != None:
            config.data=hlr_utils.fix_filename(options.data)
            if not hlr_utils.file_exists(config.data):
                parser.error("Data file [%s] does not exist" % config.data)
        else:
            parser.error("Did not specify a datafile")
    # create the output file name if there isn't one supplied
    if options.output:
        config.output=hlr_utils.fix_filename(options.output)
    else:
        file = os.path.basename(config.data)
        path = os.path.join(os.getcwd(), file)
        config.output=hlr_utils.ext_replace(path, "nxs", "txt")
        print "Using %s as output file" % config.output

    # set the verbosity
    config.verbose=options.verbose

    config.norm=hlr_utils.fix_filename(options.norm)
    if config.norm != None:
        if not hlr_utils.file_exists(config.norm):
            parser.error("Normalization file [%s] does not exist" \
                         % config.norm)
            
    config.norm_bkg=hlr_utils.fix_filename(options.norm_bkg)
    if config.norm_bkg != None:
        if not hlr_utils.file_exists(config.norm_bkg):
            parser.error("Normalization background file [%s] does not exist"\
                         % config.norm_bkg)

    config.data_bkg=hlr_utils.fix_filename(options.data_bkg)
    if config.data_bkg != None:
        if not hlr_utils.file_exists(config.data_bkg):
            parser.error("Background file [%s] does not exist" \
                         % config.data_bkg)
            
    config.dark_count=hlr_utils.fix_filename(options.dark_count)
    if config.dark_count != None:
        if not hlr_utils.file_exists(config.dark_count):
            parser.error("Dark-count file [%s] does not exist" \
                         % config.dark_count)

    if options.mon_eff != None:
        try:
            config.mon_eff=hlr_utils.split_values(options.mon_eff)
        except ValueError:
            config.mon_eff=hlr_utils.fix_filename(options.mon_eff)
            if not hlr_utils.file_exists(config.mon_eff):
                parser.error("Monitor efficiency file [%s] does not exist" \
                             % config.mon_eff)

    if options.det_eff != None:
        try:
            config.det_eff=hlr_utils.split_values(options.det_eff)
        except ValueError:
            config.det_eff=hlr_utils.fix_filename(options.det_eff)
            if not hlr_utils.file_exists(config.det_eff):
                parser.error("Detector efficiency file [%s] does not exist" \
                             % config.det_eff)
            
    config.mon_geom=hlr_utils.fix_filename(options.mon_geom)
    if config.mon_geom != None:
        if not hlr_utils.file_exists(config.mon_geom):
            parser.error("Monitor geometry file [%s] does not exist" \
                         % config.mon_geom)

    config.det_geom=hlr_utils.fix_filename(options.det_geom)
    if config.det_geom != None:
        if not hlr_utils.file_exists(config.det_geom):
            parser.error("Detector geometry file [%s] does not exist" \
                         % config.det_geom)

    # set the data paths
    if options.data_paths != None:
        config.data_paths = hlr_utils.create_data_paths(options.data_paths)
    else:
        config.data_paths = options.data_paths

    # set the monitor path
    if options.mon_path != None:
        config.mon_path = hlr_utils.create_data_path(options.mon_path)
    else:
        config.mon_path = ("/entry/monitor",1)

    # set the dead time
    if options.dead_time != None:
        config.dead_time=hlr_utils.split_values(options.dead_time)
    # set the TOF start bin
    config.TOF_start=options.TOF_start
    # set the TOF end bin
    config.TOF_end=options.TOF_end
    # set the monitor start bin
    config.mon_start=options.mon_start
    # set the monitor end bin
    config.mon_end=options.mon_end
    # set no_mon_norm flag
    config.no_mon_norm=options.no_mon_norm
    # set no_tib flag
    config.no_tib=options.no_tib

    if options.wavelength_final != None:
        config.wavelength_final=hlr_utils.split_values(options.wavelength_final)
    if options.time_zero != None:
        config.time_zero=hlr_utils.split_values(options.time_zero)

    # set the E bins
    if options.E_bins != None:
        efacts = options.E_bins.split(',')
        config.E_bins = hlr_utils.make_axis(float(efacts[0]), float(efacts[1]),
                                            float(efacts[2]))

    # set the Q bins
    if options.Q_bins != None:
        qfacts = options.Q_bins.split(',')
        config.Q_bins = hlr_utils.make_axis(float(qfacts[0]), float(qfacts[1]),
                                            float(qfacts[2]))

    # set the ability to dump the wavelength information
    config.dump_wave = options.dump_wave

    # set the ability to dump the energy transfer information
    config.dump_energy = options.dump_energy
    
    # run the program
    run(config)
